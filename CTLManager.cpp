#include "CTLManager.h"

// Initialise singleton instance of the manager
CTLManager* CTLManager::mpInstance = 0;

////////////////////////////////////////////////////////////////////////////////
// CTLManager
////////////////////////////////////////////////////////////////////////////////
// Description: Constructor for CTLManager. This can only ever be called by
//				GetInstance
// Parameters:	None
////////////////////////////////////////////////////////////////////////////////
CTLManager::CTLManager()
{
	mpEngine = New3DEngine( kTLX );
	mpEngine->StartWindowed(1600, 900);
	mpEngine->AddMediaFolder("Media");

	mpCamera = mpEngine->CreateCamera(kManual, 0.0f, 0.0f, 0.0f);
	mpCamera->RotateX(45.0f);

	mpAudio = new CAudioManager();
}

////////////////////////////////////////////////////////////////////////////////
// GetInstance
////////////////////////////////////////////////////////////////////////////////
// Description: Accessor for the singleton instance of CTLManager
// Parameters:	None
// Returns:		Pointer to either a new instance of CTLManager, or the already
//				existing instance of CTLManager
////////////////////////////////////////////////////////////////////////////////
CTLManager* CTLManager::GetInstance()
{
	// Create a new instance of the manager if one does not exist
	if(mpInstance == 0)
	{
		mpInstance = new CTLManager();
	}

	// Return the instance of the manager
	return mpInstance;
}

////////////////////////////////////////////////////////////////////////////////
// GetEngine
////////////////////////////////////////////////////////////////////////////////
// Description: Accessor for the engine contained in the manager
// Parameters:	None
// Returns:		Pointer to the engine
////////////////////////////////////////////////////////////////////////////////
I3DEngine* CTLManager::GetEngine()
{
	return mpEngine;
}

////////////////////////////////////////////////////////////////////////////////
// GetCamera
////////////////////////////////////////////////////////////////////////////////
// Description: Accessor for the camera contained in the manager
// Parameters:	None
// Returns:		Pointer to the camera
////////////////////////////////////////////////////////////////////////////////
ICamera* CTLManager::GetCamera()
{
	return mpCamera;
}

////////////////////////////////////////////////////////////////////////////////
// GetAudio
////////////////////////////////////////////////////////////////////////////////
// Description: Accessor for the audio contained in the manager
// Parameters:	None
// Returns:		Pointer to the audio manager
////////////////////////////////////////////////////////////////////////////////
CAudioManager* CTLManager::GetAudio()
{
	return mpAudio;
}